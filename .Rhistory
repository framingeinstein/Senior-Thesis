}
}
rundata$Run <- as.factor(rundata$Run)
for (ch in levels(rundata$Run)) {
if(exists("mind")){
mind <-  getCenterReflectedChiSQ(subset(rundata, Run == ch))
} else {
mind <-  rbind(mind, getCenterReflectedChiSQ(subset(rundata, Run == ch)))
}
}
for (ch in levels(rundata$Run)) {
if(!exists("mind")){
mind <-  getCenterReflectedChiSQ(subset(rundata, Run == ch))
} else {
mind <-  rbind(mind, getCenterReflectedChiSQ(subset(rundata, Run == ch)))
}
}
for (ch in levels(rundata$Run)) {
if(!exists("mind")){
mind <-  getCenterReflectedChiSQ(subset(rundata, Run == ch))
} else {
mind <-  rbind(mind, getCenterReflectedChiSQ(subset(rundata, Run == ch)))
}
}
for (ch in levels(rundata$Run)) {
print(ch)
if(!exists("mind")){
mind <-  getCenterReflectedChiSQ(subset(rundata, Run == ch))
} else {
mind <-  rbind(mind, getCenterReflectedChiSQ(subset(rundata, Run == ch)))
}
}
for (ch in levels(rundata$Run)) {
print(ch)
head(subset(rundata, Run == ch)
if(!exists("mind")){
mind <-  getCenterReflectedChiSQ(subset(rundata, Run == ch))
} else {
mind <-  rbind(mind, getCenterReflectedChiSQ(subset(rundata, Run == ch)))
}
}
for (ch in levels(rundata$Run)) {
print(ch)
head(subset(rundata, Run == ch))
if(!exists("mind")){
mind <-  getCenterReflectedChiSQ(subset(rundata, Run == ch))
} else {
mind <-  rbind(mind, getCenterReflectedChiSQ(subset(rundata, Run == ch)))
}
}
source("functions.R")
for (ch in levels(rundata$Run)) {
print(ch)
head(subset(rundata, Run == ch))
if(!exists("mind")){
mind <-  getCenterReflectedChiSQ(subset(rundata, Run == ch))
} else {
mind <-  rbind(mind, getCenterReflectedChiSQ(subset(rundata, Run == ch)))
}
}
View(rundata)
View(mind)
library(googlesheets)
library(dplyr)
library(ggplot2)
library(plotly)
library(akima)
suppressMessages(library(dplyr))
source("functions.R")
# Import model data
model <- read.table("~/Desktop/ThesisData/ReferenceData/srr-solenoid.dat.txt")
View(model)
colnames(model) <- c("transverse", "longitudinal", "Bx", "Bz")
model$r <- model$transverse / 100
model$z <- model$longitudinal / 100
#convert units
model$Bz <- model$Bz * 10000
View(model)
model %>% count(transverse, Bz) %>% filter(Bz == max(Bz))
model %>% count(r, Bz) %>% filter(Bz == max(Bz))
model %>% count(z, Bz) %>% filter(Bz == max(Bz))
model$r <- model$transverse * 100
model$z <- model$longitudinal * 100
model$r <- model$transverse * 100
model$z <- model$longitudinal * 100
model %>% count(r, Bz) %>% filter(Bz == max(Bz))
model %>% count(z, Bz) %>% filter(Bz == max(Bz))
model %>% count(r, Bz) %>% filter(Bz == max(Bz))
model_sampled <- model[sample(nrow(model), nrow(model) / 100), ]
s <- interp(model_sampled$transverse, model_sampled$longitudinal, model_sampled$Bx)
p <- plot_ly(x=s$x, y=s$y, z=s$z) %>% add_surface()
p
p
mind$RunLength <- apply(mind, 1, function(x){
if(x$z > 60) return('L')
return('S')
})
(my_sheets <- gs_ls())
my_sheets <- subset(my_sheets, author == 'jmorg003' & sheet_title != 'solenoid-map-macs-version.xlsx')
for (row in 1:nrow(my_sheets)) {
name <- my_sheets[row, "sheet_title"][[1]]
key  <- my_sheets[row, "sheet_key"][[1]]
name <- gsub("[.]xlsx", "", gsub("Run", "", name))
name <- gsub(" ", "", name)
name <- gsub("Sector ?", "", name)
name <- gsub("Hole ?", "",name)
parts <- strsplit(name, "_")[[1]]
print(key)
gap <- gs_key(key)
run <- gap %>%
gs_read(ws = "Run Data")
colnames(run) <- c("z", "Bz", "By", "Bx")
run$Hole <- parts[5]
run$Sector <- parts[4]
run$Run <- parts[1]
if(exists("rundata")){
rundata <- rbind(rundata, run)
} else {
rundata <- run
}
}
rundata$Run <- as.factor(rundata$Run)
for (ch in levels(rundata$Run)) {
print(ch)
center <- getCenterReflectedChiSQ(subset(rundata, Run == ch))
if(!exists("mind")){
mind <-  center)
} else {
mind <-  rbind(mind, center)
}
}
for (ch in levels(rundata$Run)) {
print(ch)
center <- getCenterReflectedChiSQ(subset(rundata, Run == ch))
if(!exists("mind")){
mind <-  center
} else {
mind <-  rbind(mind, center)
}
}
View(mind)
mind$RunLength <- apply(mind, 1, function(x){
if(x$z > 60) return('L')
return('S')
})
mind$RunLength <- apply(mind, 1, function(x){
if(x['z'] > 60) return('L')
return('S')
})
View(mind)
colnames(mind) <- c("CenterZ", "CenterBz", "CenterBy", "CenterBx", "Hole", "Sector", "Run", "CHI2", "RunLength")
rundata <- merge(rundata, mind, by=c("Hole", "Sector", "Run"))
View(rundata)
library(googlesheets)
library(dplyr)
library(ggplot2)
library(plotly)
library(akima)
suppressMessages(library(dplyr))
source("functions.R")
# Import model data
model <- read.table("~/Desktop/ThesisData/ReferenceData/srr-solenoid.dat.txt")
colnames(model) <- c("transverse", "longitudinal", "Bx", "Bz")
#set z and r in cm instead of meters
model$r <- model$transverse * 100
model$z <- model$longitudinal * 100
#convert units
model$Bz <- model$Bz * 10000
model %>% count(r, Bz) %>% filter(Bz == max(Bz))
model %>% count(z, Bz) %>% filter(Bz == max(Bz))
#get 10% of dats
model_sampled <- model[sample(nrow(model), nrow(model) / 100), ]
s <- interp(model_sampled$transverse, model_sampled$longitudinal, model_sampled$Bx)
m <- data.matrix(model_sampled[c("longitudinal", "Bz", "transverse")])
p <- plot_ly(x=s$x, y=s$y, z=s$z) %>% add_surface()
#p <- plot_ly(x = ~model_sampled$longitudinal, y = ~model_sampled$transverse, z = ~model_sampled$Bz, type = "mesh3d")
p
(my_sheets <- gs_ls())
my_sheets <- subset(my_sheets, author == 'jmorg003' & sheet_title != 'solenoid-map-macs-version.xlsx')
for (row in 1:nrow(my_sheets)) {
name <- my_sheets[row, "sheet_title"][[1]]
key  <- my_sheets[row, "sheet_key"][[1]]
name <- gsub("[.]xlsx", "", gsub("Run", "", name))
name <- gsub(" ", "", name)
name <- gsub("Sector ?", "", name)
name <- gsub("Hole ?", "",name)
parts <- strsplit(name, "_")[[1]]
print(key)
gap <- gs_key(key)
run <- gap %>%
gs_read(ws = "Run Data")
colnames(run) <- c("z", "Bz", "By", "Bx")
run$Hole <- parts[5]
run$Sector <- parts[4]
run$Run <- parts[1]
if(exists("rundata")){
rundata <- rbind(rundata, run)
} else {
rundata <- run
}
}
rundata$Run <- as.factor(rundata$Run)
for (ch in levels(rundata$Run)) {
print(ch)
center <- getCenterReflectedChiSQ(subset(rundata, Run == ch))
if(!exists("mind")){
mind <-  center
} else {
mind <-  rbind(mind, center)
}
}
mind$RunLength <- apply(mind, 1, function(x){
if(x['z'] > 60) return('L')
return('S')
})
colnames(mind) <- c("CenterZ", "CenterBz", "CenterBy", "CenterBx", "Hole", "Sector", "Run", "CHI2", "RunLength")
View(rundata)
View(rundata)
rundata <- merge(rundata, mind, by=c("Hole", "Sector", "Run"), all.x = TRUE)
View(rundata)
short <- subset(rundata, RunLength == 'S')
View(short)
p <- plot_ly(data = short, x = ~z, y = ~Bz)
P
p
long <- subset(rundata, RunLength == 'L')
sp <- plot_ly(data = short, x = ~z, y = ~Bz)
lp <- plot_ly(data = long, x = ~z, y = ~Bz)
sp
lp
View(mind)
rundata$Run <- as.factor(rundata$Run)
rundata$Hole <- as.factor(rundata$Hole)
rundata$Sector <- as.factor(rundata$Sector)
short <- subset(rundata, RunLength == 'S')
long <- subset(rundata, RunLength == 'L')
sp <- plot_ly(data = short, x = ~z, y = ~Bz)
lp <- plot_ly(data = long, x = ~z, y = ~Bz)
sp
sp <- plot_ly(data = short, x = ~z, y = ~Bz, color = ~Hole)
sp
sp <- plot_ly(data = short, x = ~z, y = ~Bz, color = ~Sector)
lp <- plot_ly(data = long, x = ~z, y = ~Bz, color = ~Sector)
sp
lp
ap <- plot_ly(data = rundata, x = ~z, y = ~Bz, color = ~Sector)
ap
mp <- plot_ly(data = model_sampled, x = ~z, y = ~Bz)
mp
View(model_sampled)
model_center <- subset(model, transverse == 0)
View(model_center)
mp <- plot_ly(data = model_center, x = ~z, y = ~Bz)
mp
model_lcenter <- subset(model, longitudinal == 0)
mlp <- plot_ly(data = model_lcenter, x = ~transverse, y = ~Bz)
mlp
model_lcenter <- subset(model, longitudinal == 0)
mp <- plot_ly(data = model_center, x = ~z, y = ~Bz)
mp
ap <- plot_ly(data = rundata, x = ~z, y = ~Bz, color = ~Sector)
ap
sector0 <- subset(rundata, Sector == 0)
s0 <- plot_ly(data = sector0, x = ~z, y = ~Bz)
s0
sector0_short <- subset(sector0, RunLength == 'S')
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz)
s0s
sector0_long <- subset(sector0, RunLength == 'L')
s0l <- plot_ly(data = sector0_long, x = ~z, y = ~Bz)
s0l
View(mind)
mean(mean$z)
mean(mind$z)
View(m)
View(mind)
mean(CenterZ$z)
mean(mind$CenterZ)
View(mind)
mean(subset(mind, RunLength == 'S')$CenterZ)
mean(subset(mind, RunLength == 'L')$CenterZ)
s0l
s0s
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = c(20, 20), y= c(min(disp), max(disp)), mode = "lines")
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = c(20, 20), y= c(min(Bz), max(Bz)), mode = "lines")
s0s
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz, mode = "markers") %>%
add_trace(x = c(20, 20), y= c(min(Bz), max(Bz)), mode = "lines")
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz, mode = "markers") %>%
add_trace(x = c(20, 20), y= c(min(~Bz), max(~Bz)), mode = "lines")
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz, mode = "markers") %>%
add_trace(x = c(20, 20), y= c(min(sector0_short$Bz), max(sector0_short$Bz)), mode = "lines")
s0s
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = c(20, 20), y= c(min(sector0_short$Bz), max(sector0_short$Bz)), mode = "lines")
s0s
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %<%
add_trace(x = c(20, 20), y= c(min(sector0_short$Bz), max(sector0_short$Bz)), mode = "lines")
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = c(20, 20), y= c(min(sector0_short$Bz), max(sector0_short$Bz)))
s0s
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = c(mean(subset(mind, RunLength == 'S')$CenterZ), mean(subset(mind, RunLength == 'S')$CenterZ)), y= c(min(sector0_short$Bz), max(sector0_short$Bz)))
mean(subset(mind, RunLength == 'L')$CenterZ)
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = c(mean(subset(mind, RunLength == 'S')$CenterZ), mean(subset(mind, RunLength == 'S')$CenterZ)), y= c(min(sector0_short$Bz), max(sector0_short$Bz)))
s0s
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = c(mean(subset(mind, RunLength == 'S')$CenterZ), mean(subset(mind, RunLength == 'S')$CenterZ)), y= c(min(sector0_short$Bz), max(sector0_short$Bz)), mode="lines")
s0s
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = ~z, y=~Bz, mode="markers")
add_trace(x = c(mean(subset(mind, RunLength == 'S')$CenterZ), mean(subset(mind, RunLength == 'S')$CenterZ)), y= c(min(sector0_short$Bz), max(sector0_short$Bz)), mode="lines")
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(data = sector0_short, x = ~z, y=~Bz, mode="markers")
add_trace(x = c(mean(subset(mind, RunLength == 'S')$CenterZ), mean(subset(mind, RunLength == 'S')$CenterZ)), y= c(min(sector0_short$Bz), max(sector0_short$Bz)), mode="lines")
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(p = sector0_short, x = ~z, y=~Bz, mode="markers")
add_trace(x = c(mean(subset(mind, RunLength == 'S')$CenterZ), mean(subset(mind, RunLength == 'S')$CenterZ)), y= c(min(sector0_short$Bz), max(sector0_short$Bz)), mode="lines")
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = sector0_short$z, y=sector0_short$Bz, mode="markers")
add_trace(x = c(mean(subset(mind, RunLength == 'S')$CenterZ), mean(subset(mind, RunLength == 'S')$CenterZ)), y= c(min(sector0_short$Bz), max(sector0_short$Bz)), mode="lines")
s0s <- plot_ly() %>%
add_trace(x = sector0_short$z, y=sector0_short$Bz, mode="markers")
add_trace(x = c(mean(subset(mind, RunLength == 'S')$CenterZ), mean(subset(mind, RunLength == 'S')$CenterZ)), y= c(min(sector0_short$Bz), max(sector0_short$Bz)), mode="lines")
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = c(mean(subset(mind, RunLength == 'S')$CenterZ), mean(subset(mind, RunLength == 'S')$CenterZ)), y= c(min(sector0_short$Bz), max(sector0_short$Bz)), mode="lines")
s0s
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = c(mean(subset(mind, RunLength == 'S')$CenterZ), mean(subset(mind, RunLength == 'S')$CenterZ)), y= c(min(~Bz), max(~Bz)), mode="lines")
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = c(mean(subset(mind, RunLength == 'S')$CenterZ), mean(subset(mind, RunLength == 'S')$CenterZ)), y= c(min(Bz), max(Bz)), mode="lines")
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = c(mean(subset(mind, RunLength == 'S')$CenterZ), mean(subset(mind, RunLength == 'S')$CenterZ)), y= c(min(~sector0_short$Bz), max(~sector0_short$Bz)), mode="lines")
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
add_trace(x = c(mean(subset(mind, RunLength == 'S')$CenterZ), mean(subset(mind, RunLength == 'S')$CenterZ)), y= c(min(sector0_short$Bz), max(sector0_short$Bz)), mode="lines")
s0s
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz) %>%
layout(shapes=list(type='line', x0= 0.2, x1= 0.2, y0=min(sector0_short$Bz), y1=max(sector0_short$Bz), line=list(dash='dot', width=1)),
title = 'This is the Title',
xaxis = list(title = "X-Axis", showgrid = TRUE),
yaxis = list(title = "Y-Axis", showgrid = TRUE))
s0s
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz, type = 'scatter') %>%
layout(shapes=list(type='line', x0= 0.2, x1= 0.2, y0=min(sector0_short$Bz), y1=max(sector0_short$Bz), line=list(dash='dot', width=1)),
title = 'This is the Title',
xaxis = list(title = "X-Axis", showgrid = TRUE),
yaxis = list(title = "Y-Axis", showgrid = TRUE))
s0s
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz, type = 'scatter', mode="markers") %>%
layout(shapes=list(type='line', x0= 0.2, x1= 0.2, y0=min(sector0_short$Bz), y1=max(sector0_short$Bz), line=list(dash='dot', width=1)),
title = 'This is the Title',
xaxis = list(title = "X-Axis", showgrid = TRUE),
yaxis = list(title = "Y-Axis", showgrid = TRUE))
s0s
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz, type = 'scatter', mode="markers") %>%
layout(shapes=list(type='line', x0= mean(subset(mind, RunLength == 'S'))$CenterZ, x1= mean(subset(mind, RunLength == 'S'))$CenterZ, y0=min(sector0_short$Bz), y1=max(sector0_short$Bz), line=list(dash='dot', width=1)),
title = 'This is the Title',
xaxis = list(title = "X-Axis", showgrid = TRUE),
yaxis = list(title = "Y-Axis", showgrid = TRUE))
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz, type = 'scatter', mode="markers") %>%
layout(shapes=list(type='line', x0= mean(subset(mind, RunLength == 'S'))["CenterZ"], x1= mean(subset(mind, RunLength == 'S'))["CenterZ"], y0=min(sector0_short$Bz), y1=max(sector0_short$Bz), line=list(dash='dot', width=1)),
title = 'This is the Title',
xaxis = list(title = "X-Axis", showgrid = TRUE),
yaxis = list(title = "Y-Axis", showgrid = TRUE))
s0s
mean(subset(mind, RunLength == 'S'))["CenterZ"]
subset(mind, RunLength == 'S')
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz, type = 'scatter', mode="markers") %>%
layout(shapes=list(type='line', x0= mean(subset(mind, RunLength == 'S')$CenterZ), x1= mean(subset(mind, RunLength == 'S')$CenterZ), y0=min(sector0_short$Bz), y1=max(sector0_short$Bz), line=list(dash='dot', width=1)),
title = 'This is the Title',
xaxis = list(title = "X-Axis", showgrid = TRUE),
yaxis = list(title = "Y-Axis", showgrid = TRUE))
s0s
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz, type = 'scatter', mode="markers") %>%
layout(shapes=list(type='line', x0= mean(subset(mind, RunLength == 'S')$CenterZ), x1= mean(subset(mind, RunLength == 'S')$CenterZ), y0=min(sector0_short$Bz), y1=max(sector0_short$Bz)),
title = 'This is the Title',
xaxis = list(title = "X-Axis", showgrid = TRUE),
yaxis = list(title = "Y-Axis", showgrid = TRUE))
s0s
s0l <- plot_ly(data = sector0_long, x = ~z, y = ~Bz) %>%
layout(shapes=list(type='line', x0= mean(subset(mind, RunLength == 'L')$CenterZ), x1= mean(subset(mind, RunLength == 'L')$CenterZ), y0=min(sector0_long$Bz), y1=max(sector0_long$Bz)),
title = 'This is the Title',
xaxis = list(title = "Z (cm)", showgrid = TRUE),
yaxis = list(title = "Bx", showgrid = TRUE))
s0l
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz, type = 'scatter', mode="markers") %>%
layout(shapes=list(type='line', x0= mean_s, x1= mean_s, y0=min(sector0_short$Bz), y1=max(sector0_short$Bz)),
title = 'This is the Title',
xaxis = list(title = "X-Axis", showgrid = TRUE),
yaxis = list(title = "Y-Axis", showgrid = TRUE))
s0l <- plot_ly(data = sector0_long, x = ~z, y = ~Bz) %>%
layout(shapes=list(type='line', x0= mean_l, x1= mean_l, y0=min(sector0_long$Bz), y1=max(sector0_long$Bz)),
title = 'This is the Title',
xaxis = list(title = "Z (cm)", showgrid = TRUE),
yaxis = list(title = "Bx", showgrid = TRUE))
mean_l <- mean(subset(mind, RunLength == 'L')$CenterZ)
mean_s <- mean(subset(mind, RunLength == 'S')$CenterZ)
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz, type = 'scatter', mode="markers") %>%
layout(shapes=list(type='line', x0= mean_s, x1= mean_s, y0=min(sector0_short$Bz), y1=max(sector0_short$Bz)),
title = 'This is the Title',
xaxis = list(title = "X-Axis", showgrid = TRUE),
yaxis = list(title = "Y-Axis", showgrid = TRUE))
s0l <- plot_ly(data = sector0_long, x = ~z, y = ~Bz) %>%
layout(shapes=list(type='line', x0= mean_l, x1= mean_l, y0=min(sector0_long$Bz), y1=max(sector0_long$Bz)),
title = 'This is the Title',
xaxis = list(title = "Z (cm)", showgrid = TRUE),
yaxis = list(title = "Bx", showgrid = TRUE))
s0s
s0l
View(my_sheets)
View(mind)
sector0_short$z <- sector0_short$z - mean_s
sector0_long$z <- sector0_long$z - mean_l
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz, type = 'scatter', mode="markers") %>%
layout(shapes=list(type='line', x0= mean_s, x1= mean_s, y0=min(sector0_short$Bz), y1=max(sector0_short$Bz)),
title = 'This is the Title',
xaxis = list(title = "X-Axis", showgrid = TRUE),
yaxis = list(title = "Y-Axis", showgrid = TRUE))
s0s
s0l <- plot_ly(data = sector0_long, x = ~z, y = ~Bz) %>%
layout(shapes=list(type='line', x0= mean_l, x1= mean_l, y0=min(sector0_long$Bz), y1=max(sector0_long$Bz)),
title = 'This is the Title',
xaxis = list(title = "Z (cm)", showgrid = TRUE),
yaxis = list(title = "Bx", showgrid = TRUE))
s0l
sector0_recomb <- rbind(sector0_short, sector0_long)
s0l <- plot_ly(data = sector0_recomb, x = ~z, y = ~Bz)
s0l <- plot_ly(data = sector0_long, x = ~z, y = ~Bz) %>%
layout(shapes=list(type='line', x0= mean_l, x1= mean_l, y0=min(sector0_long$Bz), y1=max(sector0_long$Bz)),
title = 'This is the Title',
xaxis = list(title = "Z (cm)", showgrid = TRUE),
yaxis = list(title = "Bx", showgrid = TRUE))
s0r <- plot_ly(data = sector0_recomb, x = ~z, y = ~Bz)
s0r
sector0_short$z <- sector0_short$z / 2
s0s <- plot_ly(data = sector0_short, x = ~z, y = ~Bz, type = 'scatter', mode="markers") %>%
layout(shapes=list(type='line', x0= mean_s, x1= mean_s, y0=min(sector0_short$Bz), y1=max(sector0_short$Bz)),
title = 'This is the Title',
xaxis = list(title = "X-Axis", showgrid = TRUE),
yaxis = list(title = "Y-Axis", showgrid = TRUE))
s0s
sector0_recomb <- rbind(sector0_short, sector0_long)
s0r <- plot_ly(data = sector0_recomb, x = ~z, y = ~Bz)
s0r
sector0_short$z <- sector0_short$z / 5
sector0_recomb <- rbind(sector0_short, sector0_long)
s0r <- plot_ly(data = sector0_recomb, x = ~z, y = ~Bz)
s0r
s0r <- plot_ly(data = sector0_recomb, x = ~z, y = ~Bz, color = ~RunLength)
s0r
mp
sector0_recomb_with_model < rbind(sector0_recomb, model_center)
s0rwm <- plot_ly(data = sector0_recomb_with_model, x = ~z, y = ~Bz, color = ~RunLength)
View(model_center)
model_center$RunLength <- 'M'
sector0_recomb_with_model <- rbind(sector0_recomb, model_center)
View(center)
View(sector0)
model_center$RunLength <- 'M'
model_center$Sector <- '0'
model_center$Hole <- 'M'
model_center$Run <- 0
model_center$CenterZ <- 0
model_center$CenterBz <- 0
model_center$CenterBy<- 0
model_center$CenterBx <- 0
model_center$CHI2 <- 0
View(model_center)
model_center$By <- 0
View(sector0)
model_center$transverse <- NULL
model_center$longitudinal <- NULL
sector0_recomb_with_model <- rbind(sector0_recomb, model_center)
View(model_center)
model_center$r <- NULL
sector0_recomb_with_model <- rbind(sector0_recomb, model_center)
model_center$RunLength <- as.factor(model_center$RunLength)
model_center$RunLength <- as.factor(model_center$RunLength)
model_center$Hole <- as.factor(model_center$Hole)
model_center$Sector <- as.factor(model_center$Sector)
model_center$Run <- as.factor(model_center$Run)
sector0_recomb_with_model <- rbind(sector0_recomb, model_center)
s0rwm <- plot_ly(data = sector0_recomb_with_model, x = ~z, y = ~Bz, color = ~RunLength)
s0rwm
sector0_recomb_with_model[RunLength == 'M']
sector0_recomb_with_model[RunLength = 'M']
sector0_recomb_with_model[[RunLength = 'M']]
sector0_recomb_with_model[,"RunLength"="M"]
sector0_recomb_with_model["RunLength"="M"]
sector0_recomb_with_model[sector0_recomb_with_model$RunLength="M"]
sector0_recomb_with_model[sector0_recomb_with_model$RunLength=="M"]
View(sector0_recomb_with_model)
modelmax <- max(model_center$Bz)
sector0max <- max(sector0_recomb$Bz)
scalefactor <- modelmax / sector0max
sector0_scaled <- sector0_recomb
sector0_scaled$Bz = sector0_scaled$Bz * scalefactor
sector0_recomb_scaled_with_model <- rbind(sector0_recomb_with_model, sector0_scaled)
sector0_scaled$RunLength <- 'AS'
sector0_recomb_scaled_with_model <- rbind(sector0_recomb_with_model, sector0_scaled)
s0rwm_scaled <- plot_ly(data = sector0_recomb_scaled_with_model, x = ~z, y = ~Bz, color = ~RunLength)
s0rwm_scaled
View(mind)
View(sector0_recomb_scaled_with_model)
library(xlsx)
setwd("~/Documents/projects/ODU/Thesis")
write.xlsx(sector0_recomb_scaled_with_model, file="Analysis.xlsx", sheetName="sector0_recomb_scaled_with_model",
col.names=TRUE, row.names=FALSE, append=TRUE)
s0rwm_scaled
