library(xlsx)
setwd("~/Documents/projects/ODU/Thesis")
#install.packages("googlesheets")
options(java.parameters = "-Xmx8000m")
library(googlesheets)
library(dplyr)
library(ggplot2)
library(plotly)
library(akima)
suppressMessages(library(dplyr))
source("functions.R")
library(xlsx)
library(stats)
library(varhandle)
library(webshot)
source("functions.R")
retrieveModelData()
retrieveRunData()
master_lookup()
rundata <- merge(rundata, mind, by=c("Hole", "Sector", "Run"), all.x = TRUE)
rundata <- normalizeRundata(rundata)
mind$FittedCenterZ <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz))
})
mind$FittedCenterZ <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r2", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz))
})
rundata <- merge(rundata, mind[c("Run", "FittedCenterZ")], by=c("Run"), all.x = TRUE)
rundata$FittedCenterZ <- rundata$FittedCenterZ.y
rundata$FittedCenterZ.x <- NULL
rundata$FittedCenterZ.y <- NULL
mind$CenterDelta <- mind$CenterZ - mind$FittedCenterZ
source("functions.R")
mind[abs(mind$CenterDelta) > 15]$FittedCenterZ <- apply(subset(mind, abs(mind$CenterDelta) > 15)[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r2", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz))
})
mind[abs(mind$CenterDelta) > 15]$FittedCenterZ <- apply(subset(mind, abs(mind$CenterDelta) > 15)[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r3", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz))
})
mind[abs(mind$CenterDelta) > 15,]$FittedCenterZ <- apply(subset(mind, abs(mind$CenterDelta) > 15)[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r3", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz))
})
mind[abs(mind$CenterDelta) > 15,]
mind[abs(mind$CenterDelta) > 15,]$FittedCenterZ <- apply(subset(mind, abs(mind$CenterDelta) > 15)[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r4", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz))
})
mind[abs(mind$CenterDelta) > 15 && !is.nan(mind$CenterDelta) , ]
mind[abs(mind$CenterDelta) > 15 && !is.na(mind$CenterDelta) , ]
mind[abs(mind$CenterDelta) > 15 & !is.nan(mind$CenterDelta) , ]
mind[abs(mind$CenterDelta) > 15 & !is.nan(mind$CenterDelta) , ]$FittedCenterZ <- apply(subset(mind, abs(mind$CenterDelta) > 15& !is.nan(mind$CenterDelta))[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r5", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz))
})
mind[abs(mind$CenterDelta) > 15 & !is.nan(mind$CenterDelta) , ]
mind[abs(mind$CenterDelta) > 15 & !is.nan(mind$CenterDelta) , ]$FittedCenterZ <- apply(subset(mind, abs(mind$CenterDelta) > 15& !is.nan(mind$CenterDelta))[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r5", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz), s=seq(from=1, to=100, by = .01))
})
source("functions.R")
mind[abs(mind$CenterDelta) > 15 & !is.nan(mind$CenterDelta) , ]$FittedCenterZ <- apply(subset(mind, abs(mind$CenterDelta) > 15& !is.nan(mind$CenterDelta))[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r5", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, s=seq(from=1, to=100, by = .01)))
})
mind[abs(mind$CenterDelta) > 15 & !is.nan(mind$CenterDelta) , ]$FittedCenterZ <- apply(subset(mind, abs(mind$CenterDelta) > 15& !is.nan(mind$CenterDelta))[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r6", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, s=seq(from=1, to=100, by = .01)))
})
mind$CenterDelta <- mind$CenterZ - mind$FittedCenterZ
mind[abs(mind$CenterDelta) > 15 & !is.nan(mind$CenterDelta) , ]
mind[abs(mind$CenterDelta) > 15 & !is.nan(mind$CenterDelta) , ]$FittedCenterZ <- apply(subset(mind, abs(mind$CenterDelta) > 15& !is.nan(mind$CenterDelta))[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r6", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 2, s=seq(from=1, to=100, by = .01)))
})
mind[abs(mind$CenterDelta) > 15 & !is.nan(mind$CenterDelta) , ]$FittedCenterZ <- apply(subset(mind, abs(mind$CenterDelta) > 15& !is.nan(mind$CenterDelta))[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r7", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 2, s=seq(from=1, to=100, by = .01)))
})
mind[abs(mind$CenterDelta) > 15 & !is.nan(mind$CenterDelta) , ]
mind$CenterDelta <- mind$CenterZ - mind$FittedCenterZ
mind[abs(mind$CenterDelta) > 15 & !is.nan(mind$CenterDelta) , ]
mind[abs(mind$CenterDelta) > 15 & !is.nan(mind$CenterDelta) , ]$FittedCenterZ <- apply(subset(mind, abs(mind$CenterDelta) > 15& !is.nan(mind$CenterDelta))[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r8", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 4, s=seq(from=0, to=100, by = .01)))
})
mind$CenterDelta <- mind$CenterZ - mind$FittedCenterZ
mind[abs(mind$CenterDelta) > 15 & !is.nan(mind$CenterDelta) , ]
rundata <- merge(rundata, mind[c("Run", "FittedCenterZ")], by=c("Run"), all.x = TRUE)
rundata$FittedCenterZ <- rundata$FittedCenterZ.y
rundata$FittedCenterZ.x <- NULL
rundata$FittedCenterZ.y <- NULL
rundata$BxOverBz <- rundata$Bx / rundata$Bz
rundata$ByOverBz <- rundata$By / rundata$Bz
mind$FittedCenterZBy <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "By - r8", function(d){return(data.frame(d$NormalizedBy.x, d$NormalizedBy.y))}, reflectHorizVert, multiplier = 4, s=seq(from=0, to=100, by = .01)))
})
model_center <- subset(model_sampled, r == 0)
#mean_l <- mean(subset(mind, RunLength == 'L' & Good == 'Y')$CenterZ)
#mean_s <- mean(subset(mind, RunLength == 'S' & Good == 'Y')$CenterZ)
rundata$NormalizedZ <- apply(rundata, 1, function(x){
if(x['RunLength'] == 'S'){
return((as.numeric(x['z']) - as.numeric(x['FittedCenterZ'])) / 10 )
}
return(as.numeric(x['z']) - as.numeric(x['FittedCenterZ']))
})
r0 <- subset(rundata, r == 0 & Good == "Y")
r1 <- subset(rundata, r == 1.25 & Good == "Y")
r30 <- subset(rundata, r == 30 & Good == "Y")
model_center <- fixModel(model_center)
model_1 <- fixModel(subset(model_sampled, r == 1.25))
model_30 <- fixModel(subset(model_sampled, r == 30))
scalefactor_0_Bz <- max(model_center$Bz) / max(r0$Bz)
scalefactor_0_Bx <- max(model_center$Bx) / max(r0$NormalizedBx)
scalefactor_0_By <- max(model_center$By) / max(r0$NormalizedBy)
r0_scaled <- r0
r0_scaled$ScaledBz = r0_scaled$Bz * scalefactor_0_Bz
r0_scaled$ScaledBy = r0_scaled$NormalizedBy * scalefactor_0_By
r0_scaled$ScaledBx = r0_scaled$NormalizedBx * 1
r0_scaled$RunLength <- 'AS'
model_1max <- max(model_1$Bz)
r1max <- max(r1$Bz)
scalefactor_1_Bz <- max(model_1$Bz) / max(r1$Bz)
scalefactor_1_Bx <- max(model_1$Bx) / max(r1$NormalizedBx)
scalefactor_1_By <- max(model_1$By) / max(r1$NormalizedBy)
r1_scaled <- r1
r1_scaled$Bz = r1_scaled$Bz * scalefactor_1_Bz
r1_scaled$ScaledBy = r1_scaled$NormalizedBy * scalefactor_1_By
r1_scaled$ScaledBx = r1_scaled$NormalizedBx * 1
r1_scaled$RunLength <- 'AS'
model_30max <- max(model_30$Bz)
r30max <- max(r30$Bz)
scalefactor_30_Bz <- max(model_30$Bz) / max(r30$Bz)
scalefactor_30_Bx <- max(model_30$Bx) / max(r30$NormalizedBx)
scalefactor_30_By <- max(model_30$By) / max(r30$NormalizedBy)
r30_scaled <- r30
r30_scaled$ScaledBz = r30_scaled$Bz * scalefactor_30_Bz
r30_scaled$ScaledBy = r30_scaled$NormalizedBy * scalefactor_30_By
r30_scaled$ScaledBx = r30_scaled$NormalizedBx * 1
r30_scaled$RunLength <- 'AS'
r0BzVx <- plot_ly(data = r0_scaled, x =~NormalizedZ,
y = ~ScaledBz, type="scatter", mode="markers",
name=~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" "), symbol = ~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" ")) %>%
add_trace(x =~model_center$NormalizedZ, y = ~model_center$Bz, name = 'Model', type="scatter", mode = 'lines', inherit=FALSE) %>%
layout(title = 'Bz vs Z at 0 Radius')
r0BzVx
r0BxVz <- plot_ly(data = r0_scaled, x =~NormalizedZ,
y = ~NormalizedBy, type="scatter", mode="markers",
name=~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" "), symbol = ~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" ")) %>%
add_trace(x =~model_center$NormalizedZ, y = 0, name = 'Model', type="scatter", mode = 'lines', inherit=FALSE) %>%
layout(title = 'Bx vs Z at 0 Radius')
r0BxVz
ptByVz <- plot_ly(data = r0_scaled, x =~NormalizedZ,
y = ~NormalizedBy, type="scatter", mode="markers",
name=~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" "), symbol = ~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" ")) %>%
add_trace(x =~model_center$NormalizedZ, y = ~model_center$By, name = 'Model', type="scatter", mode = 'lines', inherit=FALSE) %>%
layout(title = 'By vs Z at 0 Radius')
ptByVz
#1.25
r1BzVz <- plot_ly(data = r1_scaled, x =~NormalizedZ,
y = ~ScaledBz, type="scatter", mode="markers",
name=~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" "), symbol = ~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" ")) %>%
add_trace(x =~model_1$NormalizedZ, y = ~model_1$Bz, name = 'Model', type="scatter", mode = 'lines', inherit=FALSE) %>%
layout(title = 'Bz vs Z at 1.25cm Radius')
r1BzVz
View(r1_scaled)
model_1max <- max(model_1$Bz)
r1max <- max(r1$Bz)
scalefactor_1_Bz <- max(model_1$Bz) / max(r1$Bz)
scalefactor_1_Bx <- max(model_1$Bx) / max(r1$NormalizedBx)
scalefactor_1_By <- max(model_1$By) / max(r1$NormalizedBy)
r1_scaled <- r1
r1_scaled$ScaledBz = r1_scaled$Bz * scalefactor_1_Bz
r1_scaled$ScaledBy = r1_scaled$NormalizedBy * scalefactor_1_By
r1_scaled$ScaledBx = r1_scaled$NormalizedBx * 1
r1_scaled$RunLength <- 'AS'
#1.25
r1BzVz <- plot_ly(data = r1_scaled, x =~NormalizedZ,
y = ~ScaledBz, type="scatter", mode="markers",
name=~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" "), symbol = ~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" ")) %>%
add_trace(x =~model_1$NormalizedZ, y = ~model_1$Bz, name = 'Model', type="scatter", mode = 'lines', inherit=FALSE) %>%
layout(title = 'Bz vs Z at 1.25cm Radius')
r1BzVz
#30
r30BzVz <- plot_ly(data = r30_scaled, x =~NormalizedZ,
y = ~ScaledBz, type="scatter", mode="markers",
name=~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" "), symbol = ~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" ")) %>%
add_trace(x =~model_30$NormalizedZ, y = ~model_30$Bz, name = 'Model', type="scatter", mode = 'lines', inherit=FALSE) %>%
layout(title = 'Bz vs Z at 30cm Radius')
r30BzVz
mind$FittedCenterZV2 <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r9", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 4, s=seq(from=0, to=100, by = .01)))
})
mind$FittedCenterZV2 <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r10", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 3, s=seq(from=0, to=100, by = .01)))
})
mind$FittedCenterZV2 <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r11", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 3, s=seq(from=0, to=200, by = .01)))
})
mind$FittedCenterZV2 <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r12", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 3, s=seq(from=0, to=200, by = .1)))
})
mind$FittedCenterZV2 <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r12", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 3, s=seq(from=0, to=200, by = .1)))
})
mind$FittedCenterZV2 <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r12", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 2, s=seq(from=0, to=200, by = .1)))
})
mind$FittedCenterZV2 <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r13", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 2, s=seq(from=0, to=200, by = .1)))
})
mind$FittedCenterZV2 <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r14", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 2, s=seq(from=0, to=200, by = .01)))
})
source("functions.R")
mind$CenterDeltaV2 <- mind$CenterZ - mind$FittedCenterZV2
mind[abs(CenterDeltaV2) > 15 & !is.nan(CenterDeltaV2),]
mind[abs(mind$CenterDeltaV2) > 15 & !is.nan(mind$CenterDeltaV2),]$
d
mind[abs(mind$CenterDeltaV2) > 15 & !is.nan(mind$CenterDeltaV2),]
mind[abs(mind$CenterDeltaV2) > 15 & !is.nan(mind$CenterDeltaV2),]$FittedCenterZV2 <- apply(subset(mind, abs(CenterDeltaV2) > 15 & !is.nan(CenterDeltaV2))[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r14", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 3, s=seq(from=0, to=200, by = .01)))
})
mind[abs(mind$CenterDeltaV2) > 15 & !is.nan(mind$CenterDeltaV2),]$FittedCenterZV2 <- apply(subset(mind, abs(CenterDeltaV2) > 15 & !is.nan(CenterDeltaV2))[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r15", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 3, s=seq(from=0, to=200, by = .01)))
})
mind[abs(mind$CenterDeltaV2) > 15 & !is.nan(mind$CenterDeltaV2),]$FittedCenterZV2 <- apply(subset(mind, abs(CenterDeltaV2) > 15 & !is.nan(CenterDeltaV2))[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r15", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 3, s=seq(from=0, to=200, by = .01)))
})
mind$CenterDelta <- mind$CenterZ - mind$FittedCenterZ
mind$CenterDeltaV2 <- mind$CenterZ - mind$FittedCenterZV2
mind[abs(mind$CenterDeltaV2) > 15 & !is.nan(mind$CenterDeltaV2),]$FittedCenterZV2 <- apply(subset(mind, abs(CenterDeltaV2) > 15 & !is.nan(CenterDeltaV2))[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r16", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 4, s=seq(from=0, to=200, by = .01)))
})
mind[abs(mind$CenterDeltaV2) > 15 & !is.nan(mind$CenterDeltaV2),]
mind[abs(mind$CenterDeltaV2) > 15 & !is.nan(mind$CenterDeltaV2),]$FittedCenterZV2 <- apply(subset(mind, abs(CenterDeltaV2) > 15 & !is.nan(CenterDeltaV2))[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r17", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 4, s=seq(from=-100, to=100, by = .01)))
})
mind$CenterDelta <- mind$CenterZ - mind$FittedCenterZ
mind$CenterDeltaV2 <- mind$CenterZ - mind$FittedCenterZV2
rundata <- merge(rundata, mind[c("Run", "FittedCenterZ")], by=c("Run"), all.x = TRUE)
rundata$FittedCenterZ <- rundata$FittedCenterZ.y
rundata$FittedCenterZ.x <- NULL
rundata$FittedCenterZ.y <- NULL
rundata$BxOverBz <- rundata$Bx / rundata$Bz
rundata$ByOverBz <- rundata$By / rundata$Bz
rundata$Run <- as.factor(rundata$Run)
rundata$Hole <- as.factor(rundata$Hole)
rundata$Sector <- as.factor(rundata$Sector)
rundata$Symbol <- as.factor(rundata$Symbol)
rundata$r <- as.numeric(rundata$r)
model_center <- subset(model_sampled, r == 0)
#mean_l <- mean(subset(mind, RunLength == 'L' & Good == 'Y')$CenterZ)
#mean_s <- mean(subset(mind, RunLength == 'S' & Good == 'Y')$CenterZ)
rundata$NormalizedZ <- apply(rundata, 1, function(x){
if(x['RunLength'] == 'S'){
return((as.numeric(x['z']) - as.numeric(x['FittedCenterZ'])) / 10 )
}
return(as.numeric(x['z']) - as.numeric(x['FittedCenterZ']))
})
writeMasterDataFile(m, r)
r0 <- subset(rundata, r == 0 & Good == "Y")
r1 <- subset(rundata, r == 1.25 & Good == "Y")
r30 <- subset(rundata, r == 30 & Good == "Y")
model_center <- fixModel(model_center)
model_1 <- fixModel(subset(model_sampled, r == 1.25))
model_30 <- fixModel(subset(model_sampled, r == 30))
scalefactor_0_Bz <- max(model_center$Bz) / max(r0$Bz)
scalefactor_0_Bx <- max(model_center$Bx) / max(r0$NormalizedBx)
scalefactor_0_By <- max(model_center$By) / max(r0$NormalizedBy)
r0_scaled <- r0
r0_scaled$ScaledBz = r0_scaled$Bz * scalefactor_0_Bz
r0_scaled$ScaledBy = r0_scaled$NormalizedBy * scalefactor_0_By
r0_scaled$ScaledBx = r0_scaled$NormalizedBx * 1
r0_scaled$RunLength <- 'AS'
model_1max <- max(model_1$Bz)
r1max <- max(r1$Bz)
scalefactor_1_Bz <- max(model_1$Bz) / max(r1$Bz)
scalefactor_1_Bx <- max(model_1$Bx) / max(r1$NormalizedBx)
scalefactor_1_By <- max(model_1$By) / max(r1$NormalizedBy)
r1_scaled <- r1
r1_scaled$ScaledBz = r1_scaled$Bz * scalefactor_1_Bz
r1_scaled$ScaledBy = r1_scaled$NormalizedBy * scalefactor_1_By
r1_scaled$ScaledBx = r1_scaled$NormalizedBx * 1
r1_scaled$RunLength <- 'AS'
model_30max <- max(model_30$Bz)
r30max <- max(r30$Bz)
scalefactor_30_Bz <- max(model_30$Bz) / max(r30$Bz)
scalefactor_30_Bx <- max(model_30$Bx) / max(r30$NormalizedBx)
scalefactor_30_By <- max(model_30$By) / max(r30$NormalizedBy)
r30_scaled <- r30
r30_scaled$ScaledBz = r30_scaled$Bz * scalefactor_30_Bz
r30_scaled$ScaledBy = r30_scaled$NormalizedBy * scalefactor_30_By
r30_scaled$ScaledBx = r30_scaled$NormalizedBx * 1
r30_scaled$RunLength <- 'AS'
r0BzVx <- plot_ly(data = r0_scaled, x =~NormalizedZ,
y = ~ScaledBz, type="scatter", mode="markers",
name=~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" "), symbol = ~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" ")) %>%
add_trace(x =~model_center$NormalizedZ, y = ~model_center$Bz, name = 'Model', type="scatter", mode = 'lines', inherit=FALSE) %>%
layout(title = 'Bz vs Z at 0 Radius')
r0BzVx
rundata$NormalizedZ <- apply(rundata, 1, function(x){
if(x['RunLength'] == 'S'){
return((as.numeric(x['z']) - as.numeric(x['FittedCenterZV2'])) / 10 )
}
return(as.numeric(x['z']) - as.numeric(x['FittedCenterZV2']))
})
r0 <- subset(rundata, r == 0 & Good == "Y")
r1 <- subset(rundata, r == 1.25 & Good == "Y")
r30 <- subset(rundata, r == 30 & Good == "Y")
model_center <- fixModel(model_center)
model_1 <- fixModel(subset(model_sampled, r == 1.25))
model_30 <- fixModel(subset(model_sampled, r == 30))
scalefactor_0_Bz <- max(model_center$Bz) / max(r0$Bz)
scalefactor_0_Bx <- max(model_center$Bx) / max(r0$NormalizedBx)
scalefactor_0_By <- max(model_center$By) / max(r0$NormalizedBy)
r0_scaled <- r0
r0_scaled$ScaledBz = r0_scaled$Bz * scalefactor_0_Bz
r0_scaled$ScaledBy = r0_scaled$NormalizedBy * scalefactor_0_By
r0_scaled$ScaledBx = r0_scaled$NormalizedBx * 1
r0_scaled$RunLength <- 'AS'
model_1max <- max(model_1$Bz)
r1max <- max(r1$Bz)
scalefactor_1_Bz <- max(model_1$Bz) / max(r1$Bz)
scalefactor_1_Bx <- max(model_1$Bx) / max(r1$NormalizedBx)
scalefactor_1_By <- max(model_1$By) / max(r1$NormalizedBy)
r1_scaled <- r1
r1_scaled$ScaledBz = r1_scaled$Bz * scalefactor_1_Bz
r1_scaled$ScaledBy = r1_scaled$NormalizedBy * scalefactor_1_By
r1_scaled$ScaledBx = r1_scaled$NormalizedBx * 1
r1_scaled$RunLength <- 'AS'
model_30max <- max(model_30$Bz)
r30max <- max(r30$Bz)
scalefactor_30_Bz <- max(model_30$Bz) / max(r30$Bz)
scalefactor_30_Bx <- max(model_30$Bx) / max(r30$NormalizedBx)
scalefactor_30_By <- max(model_30$By) / max(r30$NormalizedBy)
r30_scaled <- r30
r30_scaled$ScaledBz = r30_scaled$Bz * scalefactor_30_Bz
r30_scaled$ScaledBy = r30_scaled$NormalizedBy * scalefactor_30_By
r30_scaled$ScaledBx = r30_scaled$NormalizedBx * 1
r30_scaled$RunLength <- 'AS'
#@TODO: Place Title
#@TODO: Bx Over Bz, By Over Bz
#@TODO:
#export(p = ptBzVx, file = "output/center-bz-v-z-with-model.png")
#Center
r0BzVx <- plot_ly(data = r0_scaled, x =~NormalizedZ,
y = ~ScaledBz, type="scatter", mode="markers",
name=~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" "), symbol = ~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" ")) %>%
add_trace(x =~model_center$NormalizedZ, y = ~model_center$Bz, name = 'Model', type="scatter", mode = 'lines', inherit=FALSE) %>%
layout(title = 'Bz vs Z at 0 Radius')
r0BzVx
rundata$NormalizedZ <- apply(rundata, 1, function(x){
if(x['RunLength'] == 'S'){
return((as.numeric(x['z']) - as.numeric(x['FittedCenterZ'])) / 10 )
}
return(as.numeric(x['z']) - as.numeric(x['FittedCenterZ']))
})
rundata <- merge(rundata, mind[c("Run", "FittedCenterZV2")], by=c("Run"), all.x = TRUE)
rundata$FittedCenterZ <- rundata$FittedCenterZV2
rundata$NormalizedZ <- apply(rundata, 1, function(x){
if(x['RunLength'] == 'S'){
return((as.numeric(x['z']) - as.numeric(x['FittedCenterZ'])) / 10 )
}
return(as.numeric(x['z']) - as.numeric(x['FittedCenterZ']))
})
r0 <- subset(rundata, r == 0 & Good == "Y")
r1 <- subset(rundata, r == 1.25 & Good == "Y")
r30 <- subset(rundata, r == 30 & Good == "Y")
model_center <- fixModel(model_center)
model_1 <- fixModel(subset(model_sampled, r == 1.25))
model_30 <- fixModel(subset(model_sampled, r == 30))
scalefactor_0_Bz <- max(model_center$Bz) / max(r0$Bz)
scalefactor_0_Bx <- max(model_center$Bx) / max(r0$NormalizedBx)
scalefactor_0_By <- max(model_center$By) / max(r0$NormalizedBy)
r0_scaled <- r0
r0_scaled$ScaledBz = r0_scaled$Bz * scalefactor_0_Bz
r0_scaled$ScaledBy = r0_scaled$NormalizedBy * scalefactor_0_By
r0_scaled$ScaledBx = r0_scaled$NormalizedBx * 1
r0_scaled$RunLength <- 'AS'
model_1max <- max(model_1$Bz)
r1max <- max(r1$Bz)
scalefactor_1_Bz <- max(model_1$Bz) / max(r1$Bz)
scalefactor_1_Bx <- max(model_1$Bx) / max(r1$NormalizedBx)
scalefactor_1_By <- max(model_1$By) / max(r1$NormalizedBy)
r1_scaled <- r1
r1_scaled$ScaledBz = r1_scaled$Bz * scalefactor_1_Bz
r1_scaled$ScaledBy = r1_scaled$NormalizedBy * scalefactor_1_By
r1_scaled$ScaledBx = r1_scaled$NormalizedBx * 1
r1_scaled$RunLength <- 'AS'
model_30max <- max(model_30$Bz)
r30max <- max(r30$Bz)
scalefactor_30_Bz <- max(model_30$Bz) / max(r30$Bz)
scalefactor_30_Bx <- max(model_30$Bx) / max(r30$NormalizedBx)
scalefactor_30_By <- max(model_30$By) / max(r30$NormalizedBy)
r30_scaled <- r30
r30_scaled$ScaledBz = r30_scaled$Bz * scalefactor_30_Bz
r30_scaled$ScaledBy = r30_scaled$NormalizedBy * scalefactor_30_By
r30_scaled$ScaledBx = r30_scaled$NormalizedBx * 1
r30_scaled$RunLength <- 'AS'
#@TODO: Place Title
#@TODO: Bx Over Bz, By Over Bz
#@TODO:
#export(p = ptBzVx, file = "output/center-bz-v-z-with-model.png")
#Center
r0BzVx <- plot_ly(data = r0_scaled, x =~NormalizedZ,
y = ~ScaledBz, type="scatter", mode="markers",
name=~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" "), symbol = ~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" ")) %>%
add_trace(x =~model_center$NormalizedZ, y = ~model_center$Bz, name = 'Model', type="scatter", mode = 'lines', inherit=FALSE) %>%
layout(title = 'Bz vs Z at 0 Radius')
r0BzVx
r1BzVz <- plot_ly(data = r1_scaled, x =~NormalizedZ,
y = ~ScaledBz, type="scatter", mode="markers",
name=~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" "), symbol = ~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" ")) %>%
add_trace(x =~model_1$NormalizedZ, y = ~model_1$Bz, name = 'Model', type="scatter", mode = 'lines', inherit=FALSE) %>%
layout(title = 'Bz vs Z at 1.25cm Radius')
r1BzVz
r1BzVz
rundata <- merge(rundata, mind[c("Run", "FittedCenterZ")], by=c("Run"), all.x = TRUE)
rundata$FittedCenterZ <- rundata$FittedCenterZ.y
rundata$FittedCenterZ.x <- NULL
rundata$FittedCenterZ.y <- NULL
rundata$BxOverBz <- rundata$Bx / rundata$Bz
rundata$ByOverBz <- rundata$By / rundata$Bz
rundata$Run <- as.factor(rundata$Run)
rundata$Hole <- as.factor(rundata$Hole)
rundata$Sector <- as.factor(rundata$Sector)
rundata$Symbol <- as.factor(rundata$Symbol)
rundata$r <- as.numeric(rundata$r)
model_center <- subset(model_sampled, r == 0)
#mean_l <- mean(subset(mind, RunLength == 'L' & Good == 'Y')$CenterZ)
#mean_s <- mean(subset(mind, RunLength == 'S' & Good == 'Y')$CenterZ)
rundata$NormalizedZ <- apply(rundata, 1, function(x){
if(x['RunLength'] == 'S'){
return((as.numeric(x['z']) - as.numeric(x['FittedCenterZ'])) / 10 )
}
return(as.numeric(x['z']) - as.numeric(x['FittedCenterZ']))
})
writeMasterDataFile(m, r)
r0 <- subset(rundata, r == 0 & Good == "Y")
r1 <- subset(rundata, r == 1.25 & Good == "Y")
r30 <- subset(rundata, r == 30 & Good == "Y")
model_center <- fixModel(model_center)
model_1 <- fixModel(subset(model_sampled, r == 1.25))
model_30 <- fixModel(subset(model_sampled, r == 30))
scalefactor_0_Bz <- max(model_center$Bz) / max(r0$Bz)
scalefactor_0_Bx <- max(model_center$Bx) / max(r0$NormalizedBx)
scalefactor_0_By <- max(model_center$By) / max(r0$NormalizedBy)
r0_scaled <- r0
r0_scaled$ScaledBz = r0_scaled$Bz * scalefactor_0_Bz
r0_scaled$ScaledBy = r0_scaled$NormalizedBy * scalefactor_0_By
r0_scaled$ScaledBx = r0_scaled$NormalizedBx * 1
r0_scaled$RunLength <- 'AS'
model_1max <- max(model_1$Bz)
r1max <- max(r1$Bz)
scalefactor_1_Bz <- max(model_1$Bz) / max(r1$Bz)
scalefactor_1_Bx <- max(model_1$Bx) / max(r1$NormalizedBx)
scalefactor_1_By <- max(model_1$By) / max(r1$NormalizedBy)
r1_scaled <- r1
r1_scaled$ScaledBz = r1_scaled$Bz * scalefactor_1_Bz
r1_scaled$ScaledBy = r1_scaled$NormalizedBy * scalefactor_1_By
r1_scaled$ScaledBx = r1_scaled$NormalizedBx * 1
r1_scaled$RunLength <- 'AS'
model_30max <- max(model_30$Bz)
r30max <- max(r30$Bz)
scalefactor_30_Bz <- max(model_30$Bz) / max(r30$Bz)
scalefactor_30_Bx <- max(model_30$Bx) / max(r30$NormalizedBx)
scalefactor_30_By <- max(model_30$By) / max(r30$NormalizedBy)
r30_scaled <- r30
r30_scaled$ScaledBz = r30_scaled$Bz * scalefactor_30_Bz
r30_scaled$ScaledBy = r30_scaled$NormalizedBy * scalefactor_30_By
r30_scaled$ScaledBx = r30_scaled$NormalizedBx * 1
r30_scaled$RunLength <- 'AS'
r0BzVx <- plot_ly(data = r0_scaled, x =~NormalizedZ,
y = ~ScaledBz, type="scatter", mode="markers",
name=~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" "), symbol = ~paste("Run# =", Run, "r = ", r, "Phi = ", theta, "pr = ", pr,sep=" ")) %>%
add_trace(x =~model_center$NormalizedZ, y = ~model_center$Bz, name = 'Model', type="scatter", mode = 'lines', inherit=FALSE) %>%
layout(title = 'Bz vs Z at 0 Radius')
r0BzVx
mind$FittedCenterZ <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r19", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 2, offset=-15, s=seq(from=0, to=200, by = .01)))
})
source("functions.R")
mind$FittedCenterZ <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r19", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 2, offset=-15, s=seq(from=0, to=200, by = .01)))
})
mind$FittedCenterZ <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r20", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 2, offset=0, s=seq(from=0, to=200, by = .01)))
})
mind$FittedCenterZ <- apply(mind[c('Run', 'r', 'CenterZ', 'RunLength')], 1, function(m_item){
return(fitted_center(m_item, "Bz - r21", function(d){return(data.frame(d$Bz.x, d$Bz.y))}, reflectHoriz, multiplier = 2, offset=0, s=seq(from=0, to=200, by = .01)))
})
